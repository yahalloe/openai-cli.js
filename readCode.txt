is there anything wrong in this code?

import { config } from 'dotenv';
import OpenAI from 'openai';
import inquirer from 'inquirer';
import chalk from 'chalk';
import fs from 'fs'; // read file

config();
let filePath = "F:\\chatgpt-ui\\node";

const enterMessage = async () => {

    const question = await inquirer.prompt({
        name: 'askIfFileOrInput',
        type: 'list',
        message: 'read from a file or input?',
        choices: [
            'file',
            'input',
        ]
    });

    if (question.askIfFileOrInput === 'file') {
            try {
                const code = fs.readFileSync(filePath, 'utf-8');
                return code;
            } catch (error) {
                console.error(`Error reading file: ${error.message}`);
                process.exit(1);
            }
        
    } else {

    const answer = await inquirer.prompt({
        name: 'enterMessage',
        type: 'input',
        message: `\n${chalk.blueBright('You:')} `,
        default() {
            return 'Enter message';
        },
    });

    return answer.enterMessage;
    }
};

const getMaxTokens = async () => {
    const answer = await inquirer.prompt ({
        name: 'askIfChangeMaxTokens',
        type: 'list',
        message: 'change the Max tokens? \ndefault: 80 tokens', 
        choices: [
            'yes',
            'no',
        ], 
    });

    if(answer.askIfChangeMaxTokens == 'no') {
        return 80
    } else {
        const answer = await inquirer.prompt({
            name: 'getMaxTokens',
            type: 'input',
            message: 'Enter max tokens: ',
        })

        return answer.getMaxTokens
    }
}

const getSystemMessage = async () => {
    const answer = await inquirer.prompt ({
        name: 'askIfChangeSystemMessage',
        type: 'list',
        message: 'change the model? (to better fine tune the answer to your wants)\ndefault: You are a helpful assistant.', 
        choices: [
            'yes',
            'no',
        ], 
    });

    if (answer.askIfChangeSystemMessage === 'no') {
        return 'You are a helpful assistant.'
        
    } else {
        const answer = await inquirer.prompt({
            name: 'getSytemMessage',
            type: 'input',
            message: 'Enter system role message/context: ',
        })
        
        return answer.getSytemMessage
    }
}
const getModel = async () => {
    const answer = await inquirer.prompt({
        name: 'getModel',
        type: 'list',
        message: 'Select the model to be used: ',
        choices: [
            'Chatgpt-4',
            'chatgpt-3.5',
        ],
    });

    if (answer.getModel === 'chatgpt-3.5') {
        return 'gpt-3.5-turbo-0125'; // Corrected to return the selected model
    } else {
        return 'gpt-4-turbo-preview';
    }
};

const client = new OpenAI({
    apiKey: process.env.API_KEY,
});

async function main() {
    console.clear()
    const selectedModel = await getModel();
    const temperature = 0.3;
    console.clear()
    const max_tokens = await getMaxTokens();
    console.clear()
    const system_message = await getSystemMessage();
    console.clear()


    while (true) {
        const userMessage = await enterMessage(); // Use await to get user input

        if (userMessage === 'exit') {
            console.log("Exiting program");
            break;
        }

        const completion = await client.chat.completions.create({
            model: selectedModel,
            messages: [
                { "role": "system", "content": system_message },
                { "role": "user", "content": userMessage },
            ],
            temperature: temperature,
            max_tokens: max_tokens,
        });

        console.log(`\n${chalk.redBright('Assistant: ')}${completion.choices[0].message.content}\n`);
    }
}

main();
